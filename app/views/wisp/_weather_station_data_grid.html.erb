<script>
  let station_row;

  function getCurPage() {
    const initial_date = new Date("<%= @min_date %>");
    const cur_date = new Date("<%= @today %>");
    initial_date.setTime(initial_date.getTime() - 1) // subtract an hour to prevent initial and current being the same
    const days = (cur_date.getTime() - initial_date.getTime()) / (86400 * 1000);
    return Math.ceil(days / 28); // divide by default page size
  }

  const stationGridOpts = {
    url: '<%= url_for(controller: "weather_station_data", weather_station_id: @weather_station, year: @year, user_id: @user, q: 1).html_safe %>',
    editurl: '<%= url_for(controller: "weather_station_data", action: "post_data", weather_station_id: @weather_station, user_id: @user, year: @year).html_safe %>',
    datatype: 'json',
    colNames: ['Date', 'Pot. ET. (in)', 'Rainfall (in)', 'Irrigation (in)', 'Soil Moisture (%)', 'Canopy Cover (%)', 'Notes', 'ID'],
    cmTemplate: { sortable: false },
    colModel: [
      { name: 'date', index: 'date', width: 35 },
      { name: 'ref_et', index: 'ref_et', width: 30, editable: true, align: 'center', editrules: { number: true, minValue: 0.001, maxValue: 0.6 } },
      { name: 'rain', index: 'rain', width: 25, editable: true, align: 'center', editrules: { number: true, minValue: 0.0, maxValue: 10.0 } },
      { name: 'irrigation', index: 'irrigation', width: 25, editable: true, align: 'center', editrules: { number: true, minValue: 0.0, maxValue: 10.0 } },
      { name: 'entered_pct_moisture', index: 'entered_pct_moisture', width: 40, editable: true, align: 'center', editrules: { number: true, minValue: 0.0, maxValue: 100.0 } },
      { name: 'entered_pct_cover', index: 'entered_pct_cover', width: 40, editable: true, align: 'center', editrules: { number: true, minValue: 0.0, maxValue: 100.0 } },
      { name: 'notes', index: 'notes', width: 150, editable: true },
      { name: 'id', index: 'id', hidden: true, width: 1 }
    ],
    pager: '#stationGrid_pager',
    page: getCurPage(),
    rowNum: 28,
    rowList: [14, 28, 100, 250],
    imgpath: '<%= image_folder_path("jqgrid") %>',
    viewrecords: true,
    height: 330, // 14 * 22px
    gridview: false,
    scrollrows: true,
    autowidth: true,
    rownumbers: false,
    multiselect: false,
    subGrid: false,
    onSelectRow: (id) => {
      const grid = $('#stationGrid');
      if (id != station_row) grid.restoreRow(station_row);
      grid.editRow(id, true);
      station_row = id;
    },
    loadComplete: () => {
      // highlight current day
      const today = "<%= @today %>";
      const grid = $('#stationGrid');
      const ids = grid.getDataIDs();
      for (let i = 0; i <= ids.length - 1; i++) {
        const id = ids[i];
        const rowData = grid.getRowData(id);
        if (rowData.date === today) {
          grid.setSelection(id, false); // don't fire onSelectRow callback
          break
        }
      }
    },
    caption: "Field group '<%= @weather_station&.name %>'",
  }

  // handle window resizing and resize grid and chart after delay
  var resizeTimer;
  window.onresize = function() {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      const width = $("#stationGridContainer").width() - 3;
      $("#stationGrid").setGridWidth(width);
    }, 500);
  };

  $(() => {
    $("#stationGrid").jqGrid(stationGridOpts)
  });
</script>

<div>
  <p><b>Fields in this group:</b> <%=
    @weather_station.fields.collect do |fld|
      link_to(fld.name, url_for(controller: "wisp", action: "field_status", field_id: fld.id), {title: "Go to this field's status page"})
    end.join(", ").html_safe
  %></p>
  <div class="overflow">
    <div id="stationGridContainer" class="content-box grid-container">
      <table id="stationGrid" cellpadding="0" cellspacing="0"></table>
      <div id="stationGrid_pager"></div>
    </div>
  </div>
</div>
