<script>
  let farm_id;

  // From example http://stackoverflow.com/questions/5092571/how-to-make-cell-editable-dynamically-in-jqgrid
  function fillProblemsBox() {
    $.ajax({
      type: "GET",
      url: "<%= url_for(controller: "farms", action: "problems", user_id: @user).html_safe %>",
      dataType: "html",
      async: false,
      success: (newHtml) => {
        $("#farmProblemsBox").html(newHtml);
      }
    });
    return true;
  }

  // Display "Yes" or "No" for boolean
  function yesNoBoolFormat(cellvalue, options, rowObject) {
    if (cellvalue === undefined) return '';
    if (cellvalue == true || cellvalue == 'true') return 'Yes';
    return 'No';
  }

  // And (sigh!) translate back
  function yesNoBoolUnformat(cellvalue, options, rowObject) {
    if (cellvalue === undefined) return '';
    return (cellvalue == 'Yes') ? 'true' : 'false';
  }

  function addFarmDeleteButtons() {
    const grid = $("#farmSetupGrid")
    const ids = grid.getDataIDs();
    const rows = ids.length;
    for (let i = 0; i < rows; i++) {
      const id = ids[i];
      const btn = "<div class='grid-del-btn'>" +
        `<input type='button' value='Del' title=${
          rows == 1 ?
            "'Cannot delete only farm' disabled=true" :
            `'Delete this farm' onclick='deleteFarm(${id})'`
        } />` + "</div>"
      grid.setRowData(id, { act: btn });
    }
  }

  function addNewFarmRow() {
    const grid = $("#farmSetupGrid");
    grid.restoreRow(farm_id);
    const newFarm = createNewFarm();
    farm_id = newFarm.id;
    grid.addRowData(farm_id, newFarm); // add a new row with the new field's data
    addFarmDeleteButtons();
    grid.setSelection(farm_id);
    grid.editRow(farm_id, true); // put new row into inline-edit mode
  }

  function createNewFarm() {
    let farm = {};
    $.ajax({
      type: "POST",
      url: "<%= url_for(controller: "farms", action: "post_data").html_safe %>",
      data: { oper: "add", id: "_empty" },
      dataType: "json",
      contentType: "application/x-www-form-urlencoded", // This is so Rails knows to decode it
      async: false,
      success: (json) => { farm = json; }
    });
    return farm;
  }

  function deleteFarm(id) {
    const grid = $("#farmSetupGrid")
    grid.delGridRow(id, {
      msg: 'Delete this farm?\nThis will also delete all pivots,\nfields, and crops associated\nwith this farm.',
      afterSubmit: () => {
        grid.trigger("reloadGrid");
        return [true];
      },
    });
  }

  const farmGridOpts = {
    url: '<%= url_for(controller: 'farms', q: 1).html_safe %>',
    editurl: '<%= grid_post_data_url 'farms', @group_id %>',
    datatype: 'json',
    colNames: ['Name', 'Pivots', 'Fields', 'Notes', 'AD < 0?', 'Delete', 'Group ID', 'ID'],
    colModel: [
      { name: 'name', index: 'name', width: 40, editable: true },
      { name: 'pivots', index: 'pivots', width: 10, align: 'center' },
      { name: 'fields', index: 'fields', width: 10, align: 'center' },
      { name: 'notes', index: 'notes', width: 80, editable: true },
      { name: 'problem', index: 'problem', formatter: yesNoBoolFormat, unformat: yesNoBoolUnformat, width: 10, align: 'center' },
      { name: 'act', index: 'act', width: 10 },
      { name: 'group_id', index: 'group_id', width: 10, hidden: true, editable: true },
      { name: 'id', index: 'id', width: 10, hidden: true, editable: false }
    ],
    pager: '#farmSetupGrid_pager',
    rowNum: 10,
    imgpath: '<%= image_folder_path('jqgrid') %>',
    sortname: '',
    viewrecords: true,
    sortorder: '',
    gridview: false,
    scrollrows: true,
    autowidth: true,
    rownumbers: false,
    multiselect: false,
    subGrid: false,
    onSelectRow: (id) => {
      const grid = $('#farmSetupGrid');
      if (id != farm_id) grid.restoreRow(farm_id);
      grid.editRow(id, true, null, fillProblemsBox);
      farm_id = id;
    },
    loadComplete: () => {
      addFarmDeleteButtons();
      farm_id = $('#farmSetupGrid').getDataIDs()[0];
      fillProblemsBox();
    },
    caption: 'Farms',
  }

  // handle window resizing and resize grid and chart after delay
  var resizeTimer;
  window.onresize = () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      const width = $("#farmGridContainer").width() - 3;
      $("#farmSetupGrid").setGridWidth(width);
    }, 500);
  };

  $(() => {
    const farmGrid = $("#farmSetupGrid").jqGrid(farmGridOpts);
    farmGrid.filterToolbar();
    farmGrid[0].toggleToolbar();
  });
</script>

<% @title = "Farm Status" %>
<h2>Farm Status</h2>

<p>In WISP, farms are used to organize one or more pivots together. One or more pivots must be created within a farm, and one or more fields must be created under a pivot. If you delete a farm, it will also delete any pivots and fields that were created within that farm.</p>
<p>To edit a farm's name or notes, click on the appropriate cell in the table below. To confirm your changes you must press "Enter". Use the button to the right of each farm to delete it, or create a new farm using the botton below the table. "AD < 0" shows how many fields within each farm are below allowable depletion. Farms are used to organize one or more pivots, which in turn can serve one or more fields.</p>

<h3>Farms</h3>
<div class="overflow">
  <div id="farmGridContainer" class="content-box grid-container">
    <div class="flex-down gap-10">
      <table id="farmSetupGrid" cellpadding="0" cellspacing="0"></table>
      <div id="farmSetupGrid_pager"></div>
      <div>
        <button type="button" class="btn btn-light" onclick="addNewFarmRow();">Add New Farm</button>
      </div>
    </div>
  </div>
</div>

<h3>Current Status</h3>
<div id="farmProblemsBox">
  Loading farm problems...
</div>
