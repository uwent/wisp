
<script>
  PCT_COVER_METHOD = <%= Field::PCT_COVER_METHOD %>;
  LAI_METHOD = <%= Field::LAI_METHOD %>;

  let field_id;
  let allowEditField = false; // don't edit jqgrid on first click

  function loadCropGrid() {
    const url = '<%= url_for(controller: "wisp", action: "crop_setup_grid").html_safe %>';
    const data = { user_id: user_id, farm_id: farm_id, field_id: field_id }
    $('#cropDataBox').load(url, data);
    return true;
  }

  function deleteField(id) {
    const grid = $('#fieldSetupGrid')
    grid.delGridRow(id, {
      msg: 'Delete this field?\nThis will also delete all crop data\nassociated with this field.',
      afterSubmit: () => {
        field_id = grid.getDataIDs()[0];
        loadCropGrid();
        return [true];
      },
    });
  }

  function addFieldDeleteButtons() {
    let ids = $("#fieldSetupGrid").getDataIDs();
    let rows = ids.length;
    for (let i = 0; i < rows; i++) {
      const id = ids[i];
      const btn = "<div class='grid-del-btn'>" +
        `<input type='button' value='Del' title=${
          rows == 1 ?
            "'Cannot delete only field' disabled=true" :
            `'Delete this field' onclick='deleteField(${id})'`
        } />` + "</div>"
      $("#fieldSetupGrid").setRowData(id, { act: btn });
    }
  }

  // Add new field based on et mthod selection (currently controlled by separate buttons).
  function addNewFieldRow(method) {
    const grid = $('#fieldSetupGrid');
    grid.restoreRow(field_id);
    const newField = createNewField(method);
    field_id = newField.id;
    set_soil_characteristics(field_id, newField['soil_type_id']);
    grid.addRowData(field_id, newField); // add a new row with the new field's data
    addFieldDeleteButtons();
    grid.setSelection(field_id);
    grid.editRow(field_id, true); // put new row into inline-edit mode
    loadCropGrid();
  }

  // Make a call to the server to create a new field; will return new row as JSON
  function createNewField(method) {
    let field = {};
    $.ajax({
      type: "POST",
      url: '<%= url_for(controller: "fields", action: "post_data").html_safe %>',
      data: { pivot_id: pivot_id, parent_id: pivot_id, oper: 'add', id: '_empty', et_method: method },
      dataType: "json",
      contentType: "application/x-www-form-urlencoded", // This is so Rails knows to decode it
      async: false,
      success: (json) => { field = json; }
    });
    return field;
  }

  // Propagate changes from select-clicked event onwards
  // From stackoverflow.com/questions/5247138/jqgrid-change-cell-value-and-stay-in-edit-mode
  function set_soil_characteristics_from_event(event) {
    let rowID = $(event.target).closest('tr.jqgrow').attr('id');
    soil_id = parseInt($(event.target).val(), 10);
    set_soil_characteristics(rowID, soil_id);
  }

  // Ensure that default FC and PWP values are entered, whether from a new row being created
  // or from the select box being clicked. Overwrite existing values in either case.
  function set_soil_characteristics(curFieldID, soil_id) {
    // This Ruby helper enumerates all the soil_type data, same order as the select box
    let soils = <%= soil_characteristics %>; // {1:{field_capacity_pct:15.0,perm_wilting_pt_pct:5.0},2:{...}}
    let fc = soils[soil_id]['field_capacity_pct'];
    let pwp = soils[soil_id]['perm_wilting_pt_pct'];
    $(`#${curFieldID}_field_capacity_pct`).val(fc);
    $(`#${curFieldID}_perm_wilting_pt_pct`).val(pwp);
  }

  // Tag on percent sign for display
  function pctFormat(cellvalue, options, rowObject) {
    if (cellvalue === undefined) return '';
    return pctUnformat(cellvalue, options) + '%';
  }

  // Remove percent sign from displayed value
  function pctUnformat(cellvalue, options, cell) {
    if (cellvalue === undefined) return '';
    // Remove the percent sign
    let num = cellvalue.replace("%", "");
    // Do we have decimalPlaces in our format options?
    if (!(options.colModel.formatoptions.decimalPlaces === undefined)) {
      // Try parsing the number as a float (could be blank or null)
      let aFloat = parseFloat(num);
      // Success?
      if (!isNaN(aFloat)) {
        // Reformat it to a string with the appropriate number of decimal places
        num = aFloat.toFixed(options.colModel.formatoptions.decimalPlaces);
      }
    }
    return num;
  }

  const fieldGridOpts = {
    url: '<%= grid_data_url('fields', @pivot_id).html_safe %>',
    editurl: '<%= grid_post_data_url("fields", @pivot).html_safe %>',
    datatype: 'json',
    colNames: ['Name', 'ET Method', 'Area', 'Soil Type', 'Field Capacity', 'Perm. Wilt Pt', 'Target AD', 'ET Stn', 'Rain Stn', 'Soil Moist. Stn', 'Notes', 'Delete', 'Pivot', 'ID'],
    colModel:[
      { name: 'name', index: 'name', width: 83, editable: true },
      {
        name: 'et_method', index: 'et_method', width: 25, editable: false,
        formatter: (cellvalue, options, rowObject) => {
          if (cellvalue === undefined) return '';
          return cellvalue == '1' ? 'Pct Cover' : 'LAI';
        },
      },
      {
        name: 'area', index: 'area', width: 20, align: 'right',
        editable: true, editrules: { number: true, minValue: 0.0 },
        formatter: 'number', formatoptions: { decimalPlaces: 1 },
      },
      {
        name: 'soil_type_id', index: 'soil_type_id', width: 40, resizable: true, align: 'left', sorttype: 'text',
        editable: true, editrules: { required: true }, edittype: 'select', editoptions: { 
          value: '<%= soil_types_for_select %>',
          dataEvents: [{ type: 'change', fn: set_soil_characteristics_from_event }]
        },
        formatter: 'select',
      },
      {
        name: 'field_capacity_pct', index: 'field_capacity_pct', width: 35, align: 'right',
        editable: true, editrules: { number: true, minValue: 0, maxValue: 100 },
        formatter: pctFormat, unformat: pctUnformat, formatoptions: { decimalPlaces: 0 },
      },
      {
        name: 'perm_wilting_pt_pct', index: 'perm_wilting_pt_pct', width: 35, align: 'right',
        editable: true, editrules: { number: true, minValue: 0, maxValue: 100 },
        formatter: pctFormat, unformat: pctUnformat, formatoptions: { decimalPlaces: 0 },
      },
      {
        name: 'target_ad_pct', index: 'target_ad_pct', width: 25, align: 'right',
        editable: true, editrules: { number: true, minValue: 0, maxValue: 100 },
        formatter: pctFormat, unformat: pctUnformat, formatoptions: { decimalPlaces: 1 },
      },
      // These three are hidden until we get these features running
      { name: 'ref_et_station_id', index: 'ref_et_station_id', width: 25, editable: true, align: 'right', hidden: true },
      { name: 'rain_station_id', index: 'rain_station_id', width: 30, editable: true, align: 'right', hidden: true },
      { name: 'soil_moisture_station_id', index: 'soil_moisture_station_id', width: 50, editable: true, align: 'right', hidden: true },
      // end hidden columns
      { name: 'notes', index: 'notes', width: 60, editable: true, align: 'right' },
      { name: 'act', index: 'act', width: 20 },
      { name: 'pivot_id', index: 'pivot_id', width: 10, hidden: true, editable: true },
      { name: 'id', index: 'id', hidden: true, width: 10 }
    ],
    pager: '#fieldSetupGrid_pager',
    rowNum: 5,
    imgpath: '<%= image_folder_path("jqgrid") %>',
    sortname: '',
    viewrecords: true,
    sortorder: '',
    gridview: false,
    scrollrows: true,
    height: 115, // 5 x 23px
    autowidth: true,
    rownumbers: false,
    multiselect: false,
    subGrid: false,
    onSelectRow: (id) => {
      const grid = $('#fieldSetupGrid')
      if (id == field_id && allowEditField) {
        grid.editRow(id, true, null, loadCropGrid);
      } else {
        grid.restoreRow(field_id);
        allowEditField = true;
        field_id = id;
        loadCropGrid();
      }
    },
    loadComplete: () => {
      addFieldDeleteButtons();
      const grid = $("#fieldSetupGrid");
      field_id = grid.getDataIDs()[0];
      allowEditField = false;
      grid.setSelection(field_id);
    },
    caption: "Fields for pivot '<%= @pivot&.name %>'"
  }

  $(() => {
    $("#fieldSetupGrid").jqGrid(fieldGridOpts)
  });
</script>

<div class="flex-down gap-10">
  <table id="fieldSetupGrid" cellpadding="0" cellspacing="0"></table>
  <div id="fieldSetupGrid_pager"></div>
  <div class="btn-group">
    <button type="button" class="btn btn-light" onclick="addNewFieldRow(PCT_COVER_METHOD);">Add New Field (% Cover)</button>
    <button type="button" class="btn btn-light" onclick="addNewFieldRow(LAI_METHOD);">Add New Field (Leaf Area Index)</button>
  </div>
</div>
