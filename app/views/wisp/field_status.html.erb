<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script>
  <%= grid_javascript_settings %>

  const isLai = <%= @field.et_method_name == "LAI" ? "true" : "false" %>;
  const max_moisture = <%= @field.field_capacity * 100.0 %>;
  const ad_at_pwp = <%= @ad_at_pwp %>;
  let cur_date = "<%= @today %>";
  let lastsel;

  // Someday we want to turn this back on, but there's no way to adapt the growth curves
  // to user input yet. So LAI is never editable.
  let laiIsEditable = false;
  let pctCoverIsEditable = !isLai


  //-- SUMMARY BOX --//

  function showSummaryBox(date) {
    $.ajax({
      type: "GET",
      url: "<%= url_for(controller: "wisp", action: "summary_box", field_id: @field, user_id: @user).html_safe %>&cur_date=" + date,
      dataType: "html",
      async: false,
      success: function(newHtml) {
        // Set the HTML of the summary box to the new stuff
        $("#summaryBox").html(newHtml);
      }
    });
  }


  //-- WEATHER DATE PICKER --//

  const minDate = new Date('<%= @min_date.to_s %>');
  const maxDate = new Date('<%= @max_date.to_s %>');
  const initial_date = "<%= @initial_date %>";

  function setDate(newDate) {
    let pickerval = $("#date_input").val();

    // check if calendar field is blank
    if (pickerval == '') return $("#date_input").val(cur_date);

    // Detect if the passed-in object is coming from the calendar's "change" event, or
    // passed in explicitly by one of our button handlers
    if (newDate.type == "change") {
      cur_date = pickerval;
    } else {
      cur_date = newDate;
      $("#date_input").val(cur_date);
    }
    checkDateBtns(cur_date);
    $("#weatherGrid").setGridParam({ page: getCurPage(initial_date, cur_date) }).trigger("reloadGrid");
    initializeChart();
  }

  function shiftDate(days) {
    let date = new Date(cur_date);
    date.setDate(date.getDate() + days);
    setDate(date.toISOString().split('T')[0]);
  }

  function checkDateBtns(date_str) {
    const date = new Date(date_str);
    const prevWeek = structuredClone(date);
    const nextWeek = structuredClone(date);
    prevWeek.setDate(date.getDate() - 7);
    nextWeek.setDate(date.getDate() + 7);
    $("#backAWeek").prop("disabled", prevWeek.getTime() < minDate.getTime());
    $("#forwardAWeek").prop("disabled", nextWeek.getTime() > maxDate.getTime());
  }


  //-- FIELD WEATHER GRID --//

  function getCurPage(initial_date_str, cur_date_str) {
    let initial_date_obj = new Date(initial_date_str);
    initial_date_obj.setTime(initial_date_obj.getTime() - 1) // subtract an hour to prevent initial and current being the same
    let cur_date_obj = new Date(cur_date_str);
    let days = (cur_date_obj.getTime() - initial_date_obj.getTime()) / (86400 * 1000);
    let page = Math.ceil(days / 7);
    return page;
  }

  function editedFormatter(cellvalue, options, obj) {
    if (cellvalue === undefined) return '';
    // Is there an "E" for "entered"?
    if (cellvalue.indexOf("E") == -1) return parseFloat(cellvalue).toFixed(2).toString();
    return cellvalue.replace("E","");
  }
  
  function posRedFormatter(cellvalue, options, obj) {
    let cellFloat = parseFloat(cellvalue).toFixed(2);
    if (cellFloat > 0.0) {
      let cellstr = cellFloat.toString();
      return `<span style="color:red; font-size:1.5em; font-weight:bold">${cellstr}</span>`;
    }
    return "";
  }
  
  function naFormatter(cellvalue, options, obj) {
    if (cellvalue == "n/a") return cellvalue;
    if (cellvalue == "") return "0.0";
    return parseFloat(cellvalue).toFixed(2).toString();
  }

  function displayCalcValues(rowid, response) {
    $("#weatherGrid").trigger("reloadGrid");
    initializeChart();
    showSummaryBox(cur_date);
    return true;
  }

  const weatherGridOpts = {
    page: getCurPage(initial_date, cur_date),
    url: '<%= url_for(controller: "field_daily_weather", q: 1, parent_id: @pivot, field_id: @field, user_id: @user).html_safe %>',
    editurl: '<%= url_for(controller: "field_daily_weather", action: "post_data", parent_id: @pivot, field_id: @field, user_id: @user).html_safe %>',
    datatype: "json",
    colNames: ["Date", "Poten. ET", "Rainfall", "Irrigation", "% Moisture", "% Cover", "LAI", "Adj. ET", "AD", "Deep Drainage", "ID"],
    colModel: [
      { name: "date", index: "date", width: 75 },
      {
        name: "ref_et", index: "ref_et", width: 64, align: "right",
        editable: true, editrules: { number: true, minValue: 0.0, maxValue: 0.6 },
        formatter: "number", formatoptions: { decimalPlaces: 2 },
      },
      {
        name: "rain", index: "rain", width: 67, align: "right",
        editable: true, editrules: { number: true, minValue: 0.0, maxValue: 10.0 },
        formatter: "number", formatoptions: { decimalPlaces: 2 },
      },
      {
        name: "irrigation", index: "irrigation", width: 67, align: "right",
        editable: true, editrules: { number: true, minValue: 0.0, maxValue: 10.0 },
        formatter: "number", formatoptions: { decimalPlaces: 2 },
      },
      {
        name: "pct_moisture", index: "pct_moisture", width: 72, align: "right",
        editable: true, editrules: { number: true, minValue: 0.0, maxValue: max_moisture },
        formatter: editedFormatter, formatoptions: { decimalPlaces: 2 },
        cellattr: function (rowId, tv, rawObject, cm, rdata) {
          if (rawObject[4].indexOf("E") == -1) return "";
          return ('style="color:#00A050; font-size:larger"');
        },
      },
      {
        name: "entered_pct_cover", index: "entered_pct_cover", width: 63, align: "right", hidden: isLai,
        editable: pctCoverIsEditable, editrules: { number: true, minValue: 0.0, maxValue: 100.0 },
        formatter: editedFormatter, formatoptions: { decimalPlaces: 0 },
        cellattr: function (rowId, tv, rawObject, cm, rdata) {
          if (rawObject[5].indexOf('E') == -1) return "";
          return ('style="color:#00A050; font-size:larger"');
        },
      },
      {
        name: "leaf_area_index", index: "leaf_area_index", width: 63, align: "right", hidden: !(isLai),
        // Since we don't have any way to rejigger curves, laiIsEditable == false
        editable: laiIsEditable, editrules: { number: true, minValue: 0.0, maxValue: 10.0 },
        formatter: "number", formatoptions: { decimalPlaces: 2 },
      },
      {
        name: "adj_et", index: "adj_et", width: 61, align: "right",
        formatter: naFormatter, formatoptions: { decimalPlaces: 2 },
      },
      {
        name: "ad", index: "ad", width: 44, align: "right",
        formatter: "number", formatoptions: { decimalPlaces: 2 },
        cellattr: function (rowId, tv, rawObject, cm, rdata) {
          let ad = parseFloat(rawObject[8]);
          if (ad > ad_at_pwp) return "";
          return ('style="background-color:#FF0000;font-size:larger"');
        },
      },
      {
        name: "deep_drainage", index: "deep_drainage", width: 92, align: "right",
        formatter: posRedFormatter, formatoptions: { decimalPlaces: 2 },
      },
      { name: "id", index: "id", width: 1, editable: true, hidden: true }
    ], 
    pager: "#weatherGrid_pager",
    rowNum: 7,
    rowList: [7, <%= FieldDailyWeather::SEASON_DAYS %>],
    imgpath: '<%= image_folder_path("jqgrid") %>',
    sortname: "",
    viewrecords: true,
    sortorder: "",
    gridview: false,
    scrollrows: true,
    height: 162,
    autowidth: true,
    scrollOffset: 20,
    rownumbers: false,
    multiselect: false,
    onSelectRow: function(id) {
      if (id !== lastsel) $('#weatherGrid').restoreRow(lastsel);
      // TODO: displayCalcValues not being called
      $("#weatherGrid").editRow(id, true, "", "", "", "", displayCalcValues); 
      lastsel = id;
    },
    subGrid: false,
    caption: "Edit observed values below for field <%= @field.name %>",
  }


  //-- GRAPH --//

  // We don't know why the Google Vis API suddenly started having a cow over
  // our numbers. But this will reformat to fix it.
  function td(num) {
    if (null === num || undefined === num) return 0.0;
    return parseFloat(num.toPrecision(2));
  }

  // Calculate a baseline for the graph. Easy if they're not going into negative-AD territory!
  function findBaseline(ad_data, prj_data) {
    const smallest = prj_data ? Math.min(ad_data.concat(prj_data)) : Math.min(ad_data)
    if (smallest >= 0.0) return 0.0;
    // drop the baseline to a skosh below the lowest point
    return Math.floor(smallest - 0.20);
  }

  // title for chart depending on how many data points are projected
  function getPlotTitle(prj_data) {
    if (prj_data.every(v => v === true)) return "Projected Allowable Depletion";
    if (prj_data.every(v => v === false)) return "Calculated Allowable Depletion";
    return "Calculated/Projected Allowable Depletion";
  }

  // Load the Visualization API and the piechart package.
  google.load("visualization", "1.0", { "packages": ["corechart"] } );
  google.setOnLoadCallback(initializeChart);

  // Callback that creates and populates a data table,
  // instantiates the chart, passes in the data and
  // draws it.
  function initializeChart() {
    fetchChartData();
    drawChart();
  }

  // fetches data for the chart and stores it
  var chartData = {};
  function fetchChartData() {
    $.ajax({
      type: "GET",
      url: "<%= url_for(action: "projection_data", field_id: @field_id, user_id: @user).html_safe %>&cur_date=" + cur_date,
      dataType: "json",
      async: false,
      success: function(json) {
        chartData = {
          ad_data: json["ad_data"],
          prj_data: json["projected_ad_data"],
          targ_data: json["target_ad_data"],
          labels: json["labels"],
        }
      }
    });
  }

  // draws or redraws the chart without fetching new data
  function drawChart() {
    let ad_max = td(<%= @field.ad_max %>);
    let ad_min = 0.0;
    let ad_data = chartData.ad_data;
    let prj_data = chartData.prj_data;
    let targ_data = chartData.targ_data;
    let labels = chartData.labels;

    // Create the data table.
    // Field Capacity, AD, [Target], [Projected], 0.0 AD
    const data = new google.visualization.DataTable();
    data.addColumn("string", "Date");
    data.addColumn("number", "Field capacity");
    data.addColumn({type: "string", role: "annotation"});
    data.addColumn("number", "Daily AD (in.)");
    data.addColumn({type: "boolean", role: "certainty"});
    data.addColumn({type: "string", role: "annotation"});
    data.addColumn("number", "Depleted");
    data.addColumn({type: "string", role: "annotation"});
    if (targ_data) {
      data.addColumn("number", "Target");
      data.addColumn({type: "string", role: "annotation"});
    }
    const colors = ["#555555", "#0000FF", "#FF0000", "#00AA00"]; // FC gray, AD blue, AD==0 line red [, target green]

    let ad_len = ad_data.length;
    let wsc_anno = [];
    let targ_anno = [];
    let depl_anno = [];
    for (let i = 0; i < ad_len; i++) {
      wsc_anno[i] = "";
      targ_anno[i] = "";
      depl_anno[i] = "";
    };
    wsc_anno[0] = "Field capacity";
    targ_anno[ad_len-2] = "Target AD";
    depl_anno[0] = "Depleted";

    // first_projected is set to be false for the second and subsequent points of any series of
    // projected data. So only the first one gets labeled "Projected", but if there's another series of
    // them (as weird as that would be for actual data), the first one there gets labeled too.
    let first_projected = true;
    for (let i = 0; i < ad_len; i++) {
      label = labels[i];
      row = [];
      // Projected? prj_data is an array 1-for-1 w/ad_data -- true if projected, false if "real"
      projected_anno = "";
      if (prj_data[i]) {
        is_solid_ad_line = false;
        if (first_projected) {
          projected_anno = "Projected"; // label this one
          first_projected = false;  // but ensure subsequent ones aren't
        }
      } else {
        is_solid_ad_line = true;
        first_projected = true; // ready for the next start of a projection series
      }
      row = [
        label,
        ad_max,
        wsc_anno[i],
        td(ad_data[i]),
        is_solid_ad_line,
        projected_anno,
        ad_min,
        depl_anno[i]
      ];
      if (targ_data) {
        row[row.length] = td(targ_data[i]); // Tack on target if it's present
        row[row.length] = targ_anno[i];
      }
      data.addRow(row);
    }

    if (targ_data) {
      // target line present
      series = {
        0: { lineWidth: 8, areaOpacity: 0.2, visibleInLegend: false },
        1: { pointSize: 15},
        2: { lineWidth: 8, visibleInLegend: false },
        3: { areaOpacity: 0, visibleInLegend: false },
      };
    } else {
      series = {
        0: { lineWidth: 8, areaOpacity: 0.2, visibleInLegend: false },
        1: { pointSize: 15 },
        2: { lineWidth: 8, visibleInLegend: false },
      };
    }

    // Set chart options
    const options = {
      title: getPlotTitle(prj_data),
      height: 290,
      colors: colors,
      fontSize: 12,
      pointSize: 0,
      titleTextStyle: { fontSize: 18 },
      series: series,
      // Set vertical axis range to run between fudge-factored values to make the annotations show nicely
      vAxis: {
        title: "Allowable depletion (in.)",
        baseline: findBaseline(ad_data, prj_data),
        maxValue: Math.ceil(ad_max + 0.2),
      },
      annotation: { style: "line" },
    };

    // Instantiate and draw our chart, passing in some options.
    chart = new google.visualization.AreaChart(document.getElementById("graph"));
    chart.draw(data, options);
  }

  // handle window resizing and resize grid and chart after delay
  var resizeTimer;
  window.onresize = function() {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      const width = $("#weatherGridContainer").width() - 3;
      $("#weatherGrid").setGridWidth(width);
      drawChart();
    }, 500);
  };

  // show target AD in field data box
  $(() => {
    const adValue = <%= @field.target_ad_pct || "''".html_safe %>;
    $("#target_ad").val(adValue);
  })

  // initialize datepicker above grid
  $(() => {
    const dateOpts = {
      dateFormat: "yy-mm-dd",
      minDate: "<%= @min_date %>",
      maxDate: "<%= @max_date %>",
      defaultDate: "<%= @cur_date %>",
    };
    $("#date_input").datepicker(dateOpts);
    $("#date_input").change(setDate);
    checkDateBtns(cur_date);
  })

  // initialize field daily weather grid
  $(() => {
    const weatherGrid = $("#weatherGrid").jqGrid(weatherGridOpts)
    weatherGrid.filterToolbar();
    weatherGrid[0].toggleToolbar();
  });
</script>

<% @title = "Field Status" %>
<h2>Field Status</h2>

<div class="flex-across gap-10">
  <div class="field">
    <%= form_tag(url_for(controller: "wisp", action: "field_status", pivot_id: "", field_id: "")) do %>
      <label for="farm_id">Farm</label><br>
      <%= select_tag "farm_id", options_from_group_for_select(@group, @farm), { onchange: "this.form.submit();" } %>
    <% end %>
  </div>
  <div class="field">
    <%= form_tag(url_for(controller: "wisp", action: "field_status", field_id: "")) do %>
      <label for="pivot_id">Pivot</label></br>
      <%= select_tag "pivot_id", options_from_farm_for_select(@farm, @pivot), { onchange: "this.form.submit();" } %>
    <% end %>
  </div>
  <div class="field">
    <%= form_tag(url_for(controller: "wisp", action: "field_status")) do %>
      <label for="field_id">Field</label><br>
      <%= select_tag "field_id", options_from_pivot_for_select(@pivot, @field), { onchange: "this.form.submit();" } %>
    <% end %>
  </div>
</div>

<div id="fieldStatusGrid">
  <div id="fieldDataBox" class="flex-down">
    <h3>Field data</h3>
    <div class="content-box">
      <b>Farm:</b> <%= truncate(@farm.name, :length => 30) if @farm %><br>
      <b>Pivot:</b> <%= truncate(@pivot.name, :length => 30) if @pivot %><br>
      <b>Field:</b> <%= truncate(@field.name, :length => 30) %><br>
      <b>Crop:</b> <%= truncate(@field.current_crop.name, length: 32) %><br>
      <b>Variety:</b> <%= truncate(@field.current_crop.variety, length: 30) %>
      <hr>
      <b>Root zone depth:</b> <%= @field.current_crop.max_root_zone_depth if @field && @field.current_crop %> in.<br>
      <b>Emergence Date:</b> <%= abr(@field.current_crop.emergence_date) if @field && @field.current_crop %><br>
      <b>AD at field capacity:</b> <%= sprintf("%0.2f",@field.ad_max) %> in.<br>
      <b>Initial soil moisture:</b> <%= sprintf("%0.0f",@field_weather_data.first.pct_moisture) if @field_weather_data && @field_weather_data.size > 0 %> %<br>
      <% target_ad_in_str = @field.target_ad_in ? sprintf("%0.2f in.",@field.target_ad_in) : "--" %>
      <%= form_tag(url_for :controller => "wisp", :action => :field_status, :pivot_id => @pivot, :field_id => @field) do %>
        <b>Target:</b> <input name="field[target_ad_pct]" id="target_ad" size="1"/>% (<div style="display:inline" id='target_ad_in'><%= target_ad_in_str %></div>)
        <div style="margin-top: 10px;">
          <input type="submit" class="btn btn-light" value="Update Target"/>
        </div>
      <% end %>
    </div>
  </div>
  <div id="weatherBox" class="flex-down">
    <h3>Field daily weather</h3>
    <div class="content-box">
      <div>
        <div class="flex-down gap-5">
          <div class="flex-center">
            <div class="inline-flex">
              Week:
              <button id="backAWeek" title="Previous week" onclick="shiftDate(-7)">&lt;</button>
              <input name="date_input" id="date_input" class='date_input' size="10" value="<%= @cur_date %>">
              <button id="forwardAWeek" title="Next week" onclick="shiftDate(7)">&gt;</button>
              <button id="curDate" class="week-button" onclick="setDate('<%= @today %>');">Today</button>
            </div>
          </div>
          <div class="overflow">
            <div id="weatherGridContainer" class="grid-container">
              <table id="weatherGrid" cellpadding="0" cellspacing="0"></table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="seasonTotalsBox" class="flex-down">
    <h3>Season totals</h3>
    <div class="content-box">
      <div id="summaryBox">
        <%= render partial: "field_status__summary_box" %>
      </div>
    </div>
  </div>
  <div id="graphBox" class="flex-down">
    <h3>Field water balance</h3>
    <div class="content-box overflow">
      <div id="graph"></div>
    </div>
  </div>
</div>

<h3>Projected allowable depletion</h3>
<div class="content-box">
  <% if first_projected_idx = @projected_ad_data.index { |padd| padd } %>
    <p>Two days hence, based on the max adjusted ET in the past week (i.e., worst case).</p>
    <table border="0">
      <tr>
        <th><%= @dates[first_projected_idx].strftime("%b %d")%>:</th>
        <td id="proj_ad_1"><%= sprintf("%0.2f",@graph_data[first_projected_idx] || 0.0) %> in.</td>
      </tr>
      <% if first_projected_idx < @ad_data.size %>
        <tr>
          <th><%= @dates[first_projected_idx + 1].strftime('%b %d')%>:</th>
          <td id="proj_ad_2"><%= sprintf("%0.2f",@graph_data[first_projected_idx + 1]) %> in.</td>
        </tr>
      <% end %>
    </table>
  <% end %>
</div>
