<% content_for :title do %>
  WISP: Wisconsin Irrigation Scheduling Program <%= Time.now.year %>
<% end %>

<% content_for :stylesheet do %>
  <%= stylesheet_link_tag "style" -%>
  <%= jqgrid_stylesheets.html_safe -%>
  <style type="text/css">
  	h2 {text-align:center;}
	
  	#fieldSelectionBox
  	{
  	  text-align: center;
  	}

  	#fieldDataBox
  	{
  		position:absolute;
  		left:275px;
  		top:173px;
  		width:226px;
  		height:203px;
  		padding:2px;
  		border:1px solid gray;
  		margin:0px;
  	}

  	#tableDataBox
  	{
  		position:absolute;
  		left:525px;
  		top:171px;
  		width:690px;
  		padding:2px;
  		margin:0px;
  	}

  	#tableDataBox table tr td.editable
  	{
  		background:white
  	}

  	#graphBox
  	{
  		position:absolute;
  		left:275px;
  		top:400px;
  		width:575px;
  		padding:2px;
  		border:1px solid gray;
  		margin:0px;
  	}
	
  	#projectedADBox
  	{
  		position:absolute;
  		left:875px;
  		top:400px;
  		width:300px;
  		height:300px;
  		padding:2px;
  		border:1px solid gray;
  		margin:0px;
  	}
	
  	#imageADBox
  	{
  		position:absolute;
  		left:875px;
  		top:375px;
  		width:300px;
  	}
	
  	table.center
  	{
  	  margin-left:auto;
  	  margin-right:auto;
  	}
	
  	span.week-button
  	{
  	  background:#DDD;
  	  border:1px solid;
  	  border-radius:3px
  	}
  </style>
<% end %>
<%= content_for :scripts do %>
  <%= jqgrid_javascripts.html_safe %>
  <script type="text/javascript" src="https://www.google.com/jsapi"></script>
  <script type="text/javascript">
    function parseDate(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1]-1, parts[2]);
    }
    function dateToS(date) {
      return date.getFullYear() + '-' + (1+date.getMonth()) + '-' + date.getDate();
    }
    function setLastAndNextWeeks(date) {
      lastWeek = parseDate(date);
      lastWeek.setDate(lastWeek.getDate()-7);
      lastWeek = dateToS(lastWeek);
      nextWeek = parseDate(date);
      nextWeek.setDate(nextWeek.getDate()+7);
      nextWeek = dateToS(nextWeek);
    }
    
    <%= grid_javascript_settings %>
    var cur_date = '<%= @cur_date %>;'
    var lastWeek
    var nextWeek;
    setLastAndNextWeeks(cur_date);
    var initial_date = '<%= @initial_date %>';
    // Load the Visualization API and the piechart package.
    google.load('visualization', '1.0', {'packages':['corechart']});
    // Set a callback to run when the Google Visualization API is loaded.
    google.setOnLoadCallback(plotGraph);
    // Support Safari and other stupid browsers whose Date objects are nonstandard

     // Callback that creates and populates a data table,
     // instantiates the chart, passes in the data and
     // draws it.
    function plotGraph() {
      var ad_data = null;
      var prj_data = null;
      var targ_data = null;
      var labels = null;

      url = '<%= url_for(:action => :projection_data, :field_id => @field_id, :user_id => @user) %>&cur_date='+cur_date;
      $.ajax(
      { 
        type: "GET",
        url: url, 
        dataType: "json",
        async: false,
        success: function(json)
        {
         ad_data = json['ad_data'];
         prj_data = json['projected_ad_data'];
         targ_data = json['target_ad_data'];
         labels = json['labels'];
        }                                   
      });
       // Create the data table.
       var data = new google.visualization.DataTable();
       data.addColumn('string', 'Date');
       if (prj_data) {
         data.addColumn('number', 'Projected');
       }
       data.addColumn('number', 'Calculated');
       if (targ_data) {
         data.addColumn('number', 'Target');
       }
       var colors = [];
       // Add to chart data for span of known AD
       for (var ii=0,len=ad_data.length; ii<len; ii++) {
         label = labels[ii];
         ad = ad_data[ii];
         prj = ad_data[ii]; // Just use ad_data to make (hidden) prj line follow same path
         if (prj_data) {
           colors = ['#FF0000','#0000FF','#555555'];
           if (targ_data) {
             data.addRow([label,prj,ad,targ_data[ii]]);
           } else {
             data.addRow([label,prj,ad]);
           }
         } else {
           colors = ['#0000FF','#555555'];
           if (targ_data) {
             data.addRow([label,ad,targ_data[ii]]);
           } else {
             data.addRow([label,ad]);
           }
         }
         
       }
       // Extend chart data to projected AD
       if (prj_data) {
         for (var ii=0,len=prj_data.length; ii<len; ii++) {
           label = labels[ii+ad_data.length];
           ad = null;
           prj = prj_data[ii]; // Just use ad_data to make (hidden) prj line follow same path
           if (targ_data) {
             data.addRow([label,prj,null,targ_data[ii]]);
           } else {
             data.addRow([label,prj,null]);
           }
         }
       }
       // Set chart options
       var options = {'title':'Calculated / Projected Allowable Depletion (inches)',
                      'width':575,
                      'height':300,
                      'colors':colors,
                      'fontSize':10,
                      'pointSize':5,
                      'titleTextStyle':{fontSize:15}
                     };

       // Instantiate and draw our chart, passing in some options.
       var chart = new google.visualization.LineChart(document.getElementById('graphBox'));
       chart.draw(data, options);
     }
    
    function curPage(initial_date_str,cur_date_str) {
      initial_date_obj = parseDate(initial_date_str);
      // set the global
      cur_date = cur_date_str;
      cur_date_obj = parseDate(cur_date_str);
      days = (cur_date_obj.getTime() - initial_date_obj.getTime()) / (86400 * 1000);
      return(Math.ceil(days / 7));
    }
    function showSummaryBox(date) {
      $.ajax(
        {
          type: "GET",
          url: "<%= url_for(:controller => 'wisp', :action => :summary_box,
                            :field_id => @field, :user_id => @user) %>&cur_date="+date,
          dataType: 'html',
          async: false,
          success: function(newHtml)
          {
            // Set the HTML of the summary box to the new stuff
            $('#projectedADBox').html(newHtml);
          }
        });
    }
    function showTargetAD() {
      // adValue = 0.0;
      adValue = <%= @field.target_ad_pct || "''" %>;
      document.getElementById('target_ad').value = adValue;
    }
    
    function changeDate(newDate) {
      /* Detect if the passed-in object is coming from the calendar's "change" event, or
         passed in explicitly by one of our button handlers */
      if (newDate.type == "change") {
        cur_date = $('#date_input').val();
      } else {
        cur_date = newDate;
        $('#date_input').val(cur_date);
      }
      setLastAndNextWeeks(cur_date);
      cur_page = curPage(initial_date,cur_date);
      $("#weather").setGridParam({ page: cur_page }).trigger("reloadGrid");
      plotGraph();
      showSummaryBox(cur_date);
    }
    
    jQuery(document).ready(function(){
     plotGraph();
      showSummaryBox(cur_date);
      showTargetAD();
      
      $("#date_input").change(changeDate);
      
    });
    
  </script>
  
<% end %>

<% content_for :welcome do %>
  <%= render :partial => 'sidebar' %>
<% end %>

<h2 style="margin-top:0px;padding-top:0px">WISP Field Status</h2>
<div id="fieldSelectionBox">
  <table class="center" style="margin-top:10px">
  <tr>
    <td>
      <%= form_tag(url_for :controller => "wisp", :action => :field_status, :pivot_id => "", :field_id => "") do %>
        <%= select_tag "farm_id", options_from_group_for_select(@group, @farm),{ :onchange => "this.form.submit();"} %> 
      <% end %>      
    </td>
    <td>
      <%= form_tag(url_for :controller => "wisp", :action => :field_status, :field_id => "") do %>
        <%= select_tag "pivot_id", options_from_farm_for_select(@farm, @pivot),{ :onchange => "this.form.submit();"} %> 
      <% end %>      
    </td>
    <td>
      <%= form_tag(url_for :controller => "wisp", :action => :field_status) do %>
        <%= select_tag "field_id", options_from_pivot_for_select(@pivot, @field),{ :onchange => "this.form.submit();"} %> 
      <% end %>
    </td>
    <td>
      <script>   
      $(function() {
        <% if @cur_date %>
          $( "#date_input" ).datepicker({dateFormat: 'yy-mm-dd', defaultDate:<%= @cur_date %>});
        <% else %>
          $( "#date_input" ).datepicker({dateFormat: 'yy-mm-dd'});
        <% end %>
      });
      </script>
      &nbsp;&nbsp;<span class="week-button" onclick="changeDate(lastWeek);">&lt;</span>&nbsp;<input name="date_input" id="date_input" class='date_input' size="10" value="<%= @cur_date %>"></input>&nbsp;<span class="week-button" onclick="changeDate(nextWeek);">&gt;</span>
    </td>
  </tr></table>
</div>

<div id="fieldDataBox">
<h2 style="padding:5px">Field Data</h2>
Farm: <%= truncate(@farm.name, :length => 32) if @farm %><br/>
Pivot: <%= truncate(@pivot.name, :length => 32) if @pivot %><br/>
Field/soil: <%= truncate(@field.name, :length => 30) %><br/>
Crop: <%= truncate((@field.current_crop.name + " " + @field.current_crop.variety), :length => 32) %><br/>   
<hr/>
Root zone depth: <%= @field.current_crop.max_root_zone_depth if @field && @field.current_crop %> in<br/>
Emergence Date: <%= abr(@field.current_crop.emergence_date) if @field && @field.current_crop %><br/>
AD at field capacity: <%= sprintf("%0.2f",@field.ad_max) %> in.<br/>
Initial soil moisture: <%= sprintf("%0.0f",@field_weather_data.first.pct_moisture)  if @field_weather_data && @field_weather_data.size > 0 %> %<br/>
<% target_ad_in_str = @field.target_ad_in ? sprintf('%0.2f in.',@field.target_ad_in) : '--' %>
<%= form_tag(url_for :controller => "wisp", :action => :field_status, :pivot_id => @pivot, :field_id => @field) do %>
Target&nbsp;<input name="field[target_ad_pct]" id="target_ad" size="1"/>%&nbsp;(<div style="display:inline" id='target_ad_in'><%= target_ad_in_str %></div>)&nbsp;<input type="submit" value="Update Tgt."/>
<% end %>
</div>

<%= render :partial => 'wisp/partials/field_daily_wx'%>

<div id="graphBox">
  <canvas id="example" width="400" height="300"></canvas>
</div>

<div id="projectedADBox">
<%= render :partial => 'wisp/partials/summary_box'%>
</div>
